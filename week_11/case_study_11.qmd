---
title: "Case Study 11"
author: "Eleanor M. Byrne"
format: html
editor: visual
---

### Library/Packages
```{r}
# install, uncomment if needed 
# install.packages("mapview")
# install.packages("foreach")
# install.packages("doParallel")

library(tidyverse)
library(spData)
library(sf)

## New Packages
library(mapview) # new package that makes easy leaflet maps
library(foreach)
library(doParallel)
registerDoParallel(4)
getDoParWorkers() # check registered cores
```
### Get API Key
```{r}
# go to  http://api.census.gov/data/key_signup.html and get a key, then run the line below with your key.  Don't push your key to github!
# install.packages("tidycensus") # install if needed
library(tidycensus)
# tidycensus::census_api_key("6b7849450999a9f7f4020291c076bb7f734c357c", overwrite = TRUE, install = TRUE)
# use the tidycensus in front of the api key for it to work 
Sys.getenv("CENSUS_API_KEY") # where the API key is stored
```

### Creating a Population by Race in Buffalo
```{r}
# Define the race variables for download
race_vars <- c(
  "Total Population" = "P1_001N",
  "White alone" = "P1_003N",
  "Black or African American alone" = "P1_004N",
  "American Indian and Alaska Native alone" = "P1_005N",
  "Asian alone" = "P1_006N",
  "Native Hawaiian and Other Pacific Islander alone" = "P1_007N",
  "Some Other Race alone" = "P1_008N",
  "Two or More Races" = "P1_009N"
)

# Download census data for Erie County (Buffalo)
options(tigris_use_cache = TRUE)

erie <- get_decennial(geography = "block", variables = race_vars, year=2020,
                  state = "NY", county = "Erie County", geometry = TRUE,
                  sumfile = "pl", cache_table=T)
```
```{r}
# Crop the county-level data to erie county
erie_crop <- st_crop(erie, xmin = -78.9,
                        xmax = -78.85, 
                        ymin = 42.888, 
                        ymax = 42.92)
```
```{r}
# Parallel loop to generate random points for each racial group
erie_point <- foreach(race = unique(erie_crop$variable), .combine = rbind, .packages = c("dplyr", "sf")) %>% {
  
  erie_crop %>%
    filter(variable == race) %>%
    st_sample(size = .$value, exact = TRUE) %>%
    st_as_sf() %>%
    mutate(variable = race)
}

```
### Plotting the data using mapview
```{r}
# Visualize the result using mapview
library(mapview)

mapview(erie_point, 
        zcol = "variable", 
        cex = 1, 
        alpha = 0.7, 
        legend = TRUE)
```

